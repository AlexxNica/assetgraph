#!/usr/bin/env node

var AssetGraph = require('../lib/AssetGraph'),
    transforms = require('../lib/transforms'),
    query = require('../lib/query'),
    fileUtils = require('../lib/fileUtils'),
    commandLineOptions = require('../lib/camelOptimist')({usage: 'FIXME', demand: ['root', 'out-root']}),
    outRoot = fileUtils.fsDirToFileUrl(commandLineOptions.outRoot),
    cdnRoot = commandLineOptions.cdnRoot && fileUtils.ensureTrailingSlash(commandLineOptions.cdnRoot),
    staticDir = commandLineOptions.staticDir || 'static';

new AssetGraph({root: commandLineOptions.root}).transform(
    transforms.loadAssets(commandLineOptions._.map(fileUtils.fsFilePathToFileUrl)),
    transforms.populate({type: query.not('JavaScriptStaticInclude'), to: query.not(/^https?:/)}),
    transforms.bundleJavaScriptAndCSS(),
    transforms.spriteBackgroundImages(),
    transforms.addPNG8FallbackForIE6(),
    transforms.addCacheManifestSinglePage({isInitial: true}),
    transforms.minifyAssets(),
    transforms.moveAssetsToDirectory({isInitial: query.not(true), url: query.exists, type: query.not('HTML')}, '/' + staticDir),
    (cdnRoot ? transforms.moveAssetsToNewRoot({
        type: ['PNG', 'GIF', 'JPEG', 'ICO', 'CSS', 'JavaScript', 'CacheManifest']
    }, cdnRoot) : transforms.noop()),
    transforms.renameAssetsToMD5Prefix({type: query.not('HTML'), url: query.exists}),
    transforms.parallel(
        transforms.writeAssetsToDisc({url: /^file:/}, outRoot),
        cdnRoot ? transforms.writeAssetsToDisc({url: query.createPrefixMatcher(cdnRoot)}, outRoot, cdnRoot) : transforms.noop()
    )
);

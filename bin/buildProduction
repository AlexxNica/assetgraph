#!/usr/bin/env node

var AssetGraph = require('../lib/AssetGraph'),
    transforms = require('../lib/transforms'),
    query = require('../lib/query'),
    fileUtils = require('../lib/fileUtils'),
    commandLineOptions = require('../lib/3rdparty/papandreou-optimist').
        usage('$0 --root <inputRootDirectory> --out-root <outputRootDirectory> [--cdn-root <url>] [--manifest] [--static-dir <directoryName>] <htmlFile>...').
        boolean('manifest').
        demand(['root', 'out-root']).
        camelCase().argv,
    outRoot = fileUtils.fsDirToFileUrl(commandLineOptions.outRoot),
    cdnRoot = commandLineOptions.cdnRoot && fileUtils.ensureTrailingSlash(commandLineOptions.cdnRoot);

new AssetGraph({root: commandLineOptions.root}).transform(
    transforms.loadAssets(commandLineOptions._.map(fileUtils.fsFilePathToFileUrl)),
    transforms.populate({type: query.not('JavaScriptStaticInclude'), to: query.not(/^https?:/)}),
    transforms.externalizeAssets({type: ['CSS', 'JavaScript']}),
    transforms.bundleAssets({type: 'CSS'}),
    transforms.bundleAssets({type: 'JavaScript'}),
    transforms.spriteBackgroundImages(),
    transforms.postProcessBackgroundImages(),
    commandLineOptions.manifest ? transforms.addCacheManifestSinglePage({isInitial: true}) : transforms.noop(),
    transforms.minifyAssets(),
    transforms.moveAssetsToDirectory({isInitial: query.not(true), url: query.defined, type: query.not(['HTML', 'CacheManifest'])},
                                     '/' + (commandLineOptions.staticDir || 'static')),
    (cdnRoot ? transforms.moveAssetsToNewRoot({
        type: ['PNG', 'GIF', 'JPEG', 'ICO', 'CSS', 'JavaScript', 'CacheManifest']
    }, cdnRoot) : transforms.noop()),
    transforms.renameAssetsToMD5Prefix({type: query.not(['HTML', 'CacheManifest']), url: query.defined}),
    transforms.parallel(
        transforms.writeAssetsToDisc({url: /^file:/}, outRoot),
        cdnRoot ? transforms.writeAssetsToDisc({url: query.createPrefixMatcher(cdnRoot)}, outRoot, cdnRoot) : transforms.noop()
    )
);

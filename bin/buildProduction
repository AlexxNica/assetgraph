#!/usr/bin/env node

var _ = require('underscore'),
    AssetGraph = require('../lib/AssetGraph'),
    transforms = AssetGraph.transforms,
    query = AssetGraph.query,
    urlTools = require('../lib/util/urlTools'),
    commandLineOptions = require('optimist').
        usage('$0 --root <inputRootDirectory> [--label <labelName>=<dir> ...] --outroot <outputRootDirectory> [--locale <localeId>,...] [--cdnroot <url>] [--manifest] <htmlFile>...').
        boolean('manifest').
        demand(['root', 'outroot']).
        argv,
    outroot = urlTools.fsDirToFileUrl(commandLineOptions.outroot),
    cdnroot = commandLineOptions.cdnroot && urlTools.ensureTrailingSlash(commandLineOptions.cdnroot),
    localeIds = commandLineOptions.locale && _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");}));

new AssetGraph({root: commandLineOptions.root}).on('afterTransform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).on('error', function (err) {
    console.error(err.stack);
    process.exit(1);
}).queue(
    transforms.registerLabelsAsCustomProtocols(commandLineOptions.label),
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({followRelations: query.or({to: {type: 'I18n'}}, {type: query.not(['JavaScriptOneInclude', 'JavaScriptExtJsRequire']), to: {url: query.not(/^https?:/)}})}),
    transforms.stripDevelopmentModeFromOneBootstrapper({type: 'Html', isInitial: true}),
    transforms.removeRelations({type: 'JavaScriptOneInclude'}, {detach: true, unresolved: true}),
    transforms.inlineJavaScriptOneGetText(),
    transforms.convertCssImportsToHtmlStyles(),
    transforms.removeEmptyAssets({type: ['Css', 'JavaScript']}),
    transforms.externalizeRelations({type: ['HtmlStyle', 'HtmlScript']}),
    transforms.mergeIdenticalAssets({type: ['JavaScript', 'Css']}),
    transforms.spriteBackgroundImages(),
    transforms.postProcessBackgroundImages(),
    transforms.bundleAssets({type: 'Css', incoming: {type: 'HtmlStyle', node: function (node) {return !node.getAttribute('media');}}}),
    transforms.bundleAssets({type: 'JavaScript', incoming: {type: 'HtmlScript'}}),
    transforms.compressJavaScript({type: 'JavaScript'}),
    localeIds && transforms.cloneForEachLocale({type: 'Html', isInitial: true}, localeIds),
    transforms.removeAssets({type: 'I18n'}),
    commandLineOptions.manifest && transforms.addCacheManifestSinglePage({isInitial: true}),
    transforms.minifyAssets(),
    transforms.computeSerializedSize({type: ['JavaScript', 'Css']}),
    transforms.inlineRelations({type: ['HtmlStyle', 'HtmlScript'], to: {serializedSize: function (serializedSize) {return serializedSize < 4096;}}}),
    transforms.moveAssetsToDirectory({isInitial: query.not(true), type: query.not('CacheManifest')}, '/static'),
    cdnroot && transforms.moveAssetsToNewRoot({type: ['Png', 'Gif', 'Jpeg', 'Ico', 'Css', 'JavaScript', 'CacheManifest']}, cdnroot),
    transforms.renameAssetsToMd5Prefix({isInitial: query.not(true), type: query.not('CacheManifest')}),
    transforms.parallel(
        transforms.writeAssetsToDisc({url: /^file:/}, outroot),
        cdnroot && transforms.writeAssetsToDisc({url: query.createPrefixMatcher(cdnroot)}, outroot, cdnroot)
    ),
    transforms.stats()
).run();

#!/usr/bin/env node

var _ = require('underscore'),
    AssetGraph = require('../lib/AssetGraph'),
    transforms = require('../lib/transforms'),
    query = require('../lib/query'),
    fileUtils = require('../lib/fileUtils'),
    commandLineOptions = require('optimist').
        usage('$0 --root <inputRootDirectory> --out-root <outputRootDirectory> [--locale <localeId>,...] [--cdn-root <url>] [--manifest] [--static-dir <directoryName>] <htmlFile>...').
        boolean('manifest').
        demand(['root', 'out-root']).
        camelCase().
        argv,
    outRoot = fileUtils.fsDirToFileUrl(commandLineOptions.outRoot),
    cdnRoot = commandLineOptions.cdnRoot && fileUtils.ensureTrailingSlash(commandLineOptions.cdnRoot),
    localeIds = commandLineOptions.locale && _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");}));

new AssetGraph({root: commandLineOptions.root}).transform(
    transforms.loadAssets(commandLineOptions._.map(fileUtils.fsFilePathToFileUrl)),
    transforms.populate({type: query.not('JavaScriptStaticInclude'), to: query.not(/^https?:/)}),
    transforms.removeOneIncludeStatements({type: 'JavaScript'}),
    transforms.convertCSSImportsToHTMLStyles(),
    transforms.removeEmptyAssets({type: ['CSS', 'JavaScript']}),
    transforms.externalizeAssets({incoming: {type: ['HTMLStyle', 'HTMLScript']}}),
    transforms.mergeIdenticalAssets({type: ['JavaScript', 'CSS']}),
    localeIds ? transforms.cloneForEachLocale({type: 'HTML', isInitial: true}, localeIds) : transforms.noop(),
    transforms.bundleAssets({type: 'CSS', incoming: {type: 'HTMLStyle', node: function (node) {return !node.getAttribute('media');}}}),
    transforms.bundleAssets({type: 'JavaScript', incoming: {type: 'HTMLScript'}}),
    transforms.spriteBackgroundImages(),
    transforms.postProcessBackgroundImages(),
    commandLineOptions.manifest ? transforms.addCacheManifestSinglePage({isInitial: true}) : transforms.noop(),
    transforms.minifyAssets(),
    transforms.computeSerializedSize({type: ['JavaScript', 'CSS']}),
    transforms.inlineRelations({type: ['HTMLStyle', 'HTMLScript'], to: {serializedSize: function (serializedSize) {return serializedSize < 4096;}}}),
    transforms.moveAssetsToDirectory({isInitial: query.not(true), url: query.defined, type: query.not('CacheManifest')},
                                     '/' + (commandLineOptions.staticDir || 'static')),
    (cdnRoot ? transforms.moveAssetsToNewRoot({
        type: ['PNG', 'GIF', 'JPEG', 'ICO', 'CSS', 'JavaScript', 'CacheManifest']
    }, cdnRoot) : transforms.noop()),
    transforms.renameAssetsToMD5Prefix({isInitial: query.not(true), type: query.not('CacheManifest')}),
    transforms.parallel(
        transforms.writeAssetsToDisc({url: /^file:/}, outRoot),
        cdnRoot ? transforms.writeAssetsToDisc({url: query.createPrefixMatcher(cdnRoot)}, outRoot, cdnRoot) : transforms.noop()
    ),
    transforms.stats(),
    transforms.reportErrorAndTerminate()
);

#!/usr/bin/env node

var _ = require('underscore'),
    seq = require('seq'),
    AssetGraph = require('../lib/AssetGraph'),
    transforms = AssetGraph.transforms,
    passError = require('../lib/util/passError'),
    i18nTools = require('../lib/util/i18nTools'),
    uglifyAst = require('../lib/util/uglifyAst'),
    urlTools = require('../lib/util/urlTools'),
    commandLineOptions = require('optimist').
        usage('$0 [--label <labelName>=<dir> ...] --root <inputRootDirectory> --locale <localeId>,... <htmlFile>...').
        demand(['root', 'locale']).
        argv,
    localeIds = _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");}));

new AssetGraph({root: commandLineOptions.root}).on('afterTransform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).on('error', function (err) {
    process.exit(1);
}).queue(
    transforms.registerLabelsAsCustomProtocols(commandLineOptions.label),
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({followRelations: {type: ['HtmlScript', 'JavaScriptOneInclude'], to: {url: AssetGraph.query.not(/^https?:/)}}}),
    function (assetGraph, cb) {
        // We don't want to overwrite the "initially dirty" assets, such as ext-base.js.
        assetGraph.findAssets({isDirty: true}).forEach(function (dirtyAsset) {
            dirtyAsset.isDirty = false;
        });
        var occurrencesByKey = {}, // key => array of "occurrence" objects: {asset: ..., type: ..., node, ..., defaultValueAst: ...}
            prioritizedLocaleIdsByLocaleId = {},
            newI18nRelationsByJavaScriptId = {};

        localeIds.forEach(function (localeId) {
            prioritizedLocaleIdsByLocaleId[localeId] = i18nTools.expandLocaleIdToPrioritizedList(localeId);
        });

        seq()
            .extend(assetGraph.findAssets({type: 'Html', isInitial: true}))
            .seqEach(function (htmlAsset) {
                var callback = this,
                    javaScriptAssets = assetGraph.collectAssetsPostOrder(htmlAsset, {type: ['HtmlScript', 'JavaScriptOneInclude']}).filter(function (asset) {
                        return asset.type === 'JavaScript';
                    });
                seq(javaScriptAssets)
                    .parEach(function (javaScript) {
                        javaScript.getParseTree(this.into(javaScript.id));
                    })
                    .parEach(function (javaScript) {
                        var hasOneTr = false;
                        i18nTools.eachOneTrInAst(javaScript.parseTree, function (type, key, node, defaultValueAst) {
                            hasOneTr = true;
                            (occurrencesByKey[key] = occurrencesByKey[key] || []).push({
                                asset: javaScript,
                                type: type,
                                node: node,
                                defaultValueAst: defaultValueAst
                            });
                        });
                        this();
                    })
                    .seq(function () {
                        callback();
                    })
                    ['catch'](callback);
            })
            .empty()
            .extend(assetGraph.findAssets({type: 'I18n'}))
            .parEach(function (i18nAsset) {
                i18nAsset.getParseTree(this);
            })
            .unflatten()
            .seq(function (i18nAssets) {
                _.keys(occurrencesByKey).forEach(function (key) {
                    var occurrences = occurrencesByKey[key];
                    if (occurrences.length > 1) {
                        for (var i = 1 ; i < occurrences.length ; i += 1) {
                            if (!_.isEqual(occurrences[0].defaultValueAst, occurrences[1].defaultValueAst)) {
                                console.warn("Default values for " + key + " are different");
                            }
                        }
                    }
                    var numFound = 0,
                        foundByLocaleId = {};
                    i18nAssets.forEach(function (i18nAsset) {
                        if (key in i18nAsset.parseTree) {
                            numFound += 1;
                            localeIds.forEach(function (localeId) {
                                var prioritizedLocaleIds = prioritizedLocaleIdsByLocaleId[localeId];
                                for (var i = 0 ; i < prioritizedLocaleIds.length ; i += 1) {
                                    if (prioritizedLocaleIds[i] in i18nAsset.parseTree[key]) {
                                        return; // Found
                                    }
                                }
                                var leastSpecificLocaleId = prioritizedLocaleIds[prioritizedLocaleIds.length - 1],
                                    value = null;
                                if (leastSpecificLocaleId === 'en' && occurrences[0].defaultValueAst) {
                                    value = uglifyAst.astToObj(occurrences[0].defaultValueAst);
                                }
                                i18nAsset.parseTree[key][leastSpecificLocaleId] = value;
                                console.log(i18nAsset.url + ": " + key + " already found, added entry for " + leastSpecificLocaleId);

                                assetGraph.markAssetDirty(i18nAsset);
                            });
                        }
                    });
                    if (numFound === 0) {
                        console.log("Key " + key + " not found in any I18n asset");
                        var addToI18nForJavaScriptAsset,
                            includingAssetsById = {};
                        occurrences.forEach(function (occurrence) {
                            includingAssetsById[occurrence.asset.id] = occurrence.asset;
                        });
                        var includingAssets = _.values(includingAssetsById);
                        if (includingAssets.length === 1) {
                            addToI18nForJavaScriptAsset = includingAssets[0];
                        } else {
                            console.log(key + " occurs in multiple JavaScripts, choosing the last-seen one");
                            addToI18nForJavaScriptAsset = includingAssets[includingAssets.length - 1];
                        }
                        var existingI18nRelations = assetGraph.findRelations({from: addToI18nForJavaScriptAsset, to: {type: 'I18n'}}),
                            i18nAsset;
                        if (existingI18nRelations.length === 0) {
                            i18nAsset = new AssetGraph.assets.I18n({
                                isDirty: true,
                                parseTree: {}
                            });
                            var relation = new AssetGraph.relations.JavaScriptOneInclude({
                                from: addToI18nForJavaScriptAsset,
                                to: i18nAsset
                            });
                            (newI18nRelationsByJavaScriptId[addToI18nForJavaScriptAsset.id] = newI18nRelationsByJavaScriptId[addToI18nForJavaScriptAsset.id] || []).push(relation);
                            i18nAsset.url = (addToI18nForJavaScriptAsset.url || this.getBaseAssetForRelation(relation)).replace(/(?:\.js|\.html)?$/, ".i18n");
                            console.log("Creating " + i18nAsset.url);
                            assetGraph.addAsset(i18nAsset);
                            assetGraph.addRelation(relation);
                        } else {
                            if (existingI18nRelations.length > 1) {
                                console.warn(addToI18nForJavaScriptAsset + " has multiple I18n relations, choosing the first one");
                            }
                            i18nAsset = existingI18nRelations[0].to;
                        }
                        i18nAsset.parseTree[key] = {};
                        localeIds.forEach(function (localeId) {
                            var prioritizedList = prioritizedLocaleIdsByLocaleId[localeId],
                                leastSpecificLocaleId = prioritizedList[prioritizedList.length - 1],
                                value = null;
                            if (leastSpecificLocaleId === 'en' && occurrences[0].defaultValueAst) {
                                value = uglifyAst.astToObj(occurrences[0].defaultValueAst);
                            }
                            i18nAsset.parseTree[key][leastSpecificLocaleId] = value;
                            assetGraph.markAssetDirty(i18nAsset);
                        });
                    } else if (numFound > 1) {
                        console.error("Key " + key + " found in multiple I18n assets");
                    }
                });
                // Hack: Inject the new relations at the top of the file
                _.each(newI18nRelationsByJavaScriptId, function (i18nRelations, javaScriptId) {
                    var javaScript = assetGraph.idIndex[javaScriptId];
                    assetGraph.markAssetDirty(javaScript);
                    javaScript.getText = function (cb) {
                        javaScript.getDecodedSrc(passError(cb, function (decodedSrc) {
                            var oneIncludeStatements = i18nRelations.map(function (i18nRelation) {
                                return "one.include('" +
                                    urlTools.buildRelativeUrl(i18nRelation.from.url || assetGraph.findBaseAssetForRelation(i18nRelation).url, i18nRelation.to.url) +
                                    "');\n";
                            }).join("");
                            var matchSplitAfterLastOneIncludeLine = decodedSrc.match(/^([\s\S]*one\.include[^\n]*\n)([\s\S]*)$/);
                            if (matchSplitAfterLastOneIncludeLine) {
                                cb(null, matchSplitAfterLastOneIncludeLine[1] + "\n" + oneIncludeStatements + matchSplitAfterLastOneIncludeLine[2]);
                            } else {
                                cb(null, oneIncludeStatements + decodedSrc);
                            }
                        }));
                    };
                });
                cb();
            })
            ['catch'](cb);
    },
    transforms.prettyPrintAssets({type: 'I18n', isDirty: true}),
    transforms.stats(),
    transforms.writeAssetsToDisc({type: ['I18n', 'JavaScript'], isDirty: true})
).run();

#!/usr/bin/env node

var AssetGraph = require('../lib/AssetGraph'),
    transforms = AssetGraph.transforms,
    query = AssetGraph.query,
    urlTools = require('../lib/util/urlTools'),
    commandLineOptions = require('optimist').
        usage('$0 --root <inputRootDirectory> --outroot <outputRootDirectory> --cdnroot <url> <htmlFile>...').
        demand(['root', 'outroot', 'cdnroot']).
        argv,
    outroot = urlTools.fsDirToFileUrl(commandLineOptions.outroot),
    cdnroot = urlTools.ensureTrailingSlash(commandLineOptions.cdnroot);

new AssetGraph({root: commandLineOptions.root}).on('afterTransform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).on('error', function (err) {
    console.error(err.stack);
    process.exit(1);
}).queue(
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({
        onError: function (err) {console.warn(err.message);},
        followRelations: {type: query.not('HtmlAnchor'), to: {url: query.not(/^https?:/)}}
    }),
    transforms.moveAssetsToNewRoot({type: ['Png', 'Gif', 'Jpeg', 'Ico', 'Css', 'JavaScript', 'CacheManifest']}, cdnroot),
    transforms.renameAssetsToMd5Prefix({type: query.not(['Html', 'CacheManifest']), url: query.isDefined}),
    transforms.parallel(
        transforms.writeAssetsToDisc({url: /^file:/}, outroot),
        transforms.writeAssetsToDisc({url: query.createPrefixMatcher(cdnroot)}, outroot, cdnroot)
    )
).run();

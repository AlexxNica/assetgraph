#!/usr/bin/env node

var _ = require('underscore'),
    AssetGraph = require('../lib/AssetGraph'),
    transforms = require('../lib/transforms'),
    query = require('../lib/query'),
    urlTools = require('../lib/util/urlTools'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] [--cssimports] [--inline <wildCard>] --root <inputRootDirectory> <htmlFile> ...')
        .boolean('cssimports')
        .demand(['root'])
        .argv;

new AssetGraph({root: commandLineOptions.root}).on('transform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).transform(
    transforms.registerLabelsAsCustomProtocols(commandLineOptions.label),
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({type: ['HTMLStyle', 'HTMLScript', 'JavaScriptStaticInclude', 'CSSImage'], to: query.not(/^https?:/)}),
    transforms.injectOneBootstrapper({isInitial: true}),
    transforms.flattenStaticIncludes({isInitial: true}),
    transforms.removeEmptyAssets({type: 'JavaScript'}),
    transforms.inlineRelations({type: 'HTMLStyle', from: {isInitial: true, type: 'HTML'}, to: {isDirty: true}}),
    commandLineOptions.cssimports && transforms.convertHTMLStylesToInlineCSSImports(),
    transforms.inlineRelations({type: 'HTMLScript', from: {isInitial: true, type: 'HTML'}, to: {isDirty: true}}),
    transforms.prettyPrintAssets({type: 'JavaScript', incoming: {type: 'HTMLScript', from: {isInitial: true, type: 'HTML'}}}),
    transforms.prettyPrintAssets({type: 'CSS', incoming: {type: 'HTMLStyle', from: {isInitial: true, type: 'HTML'}}}),
    transforms.runJavaScriptConditionalBlocks({type: 'HTML'}, 'buildDevelopment'),
    commandLineOptions.inline && transforms.inlineRelations({to: {url: urlTools.makeFileUrlMatcher(commandLineOptions.inline)}}),
    transforms.prettyPrintAssets({isInitial: true}),
    transforms.moveAssets({isInitial: true}, function (asset) {return asset.url.replace(/\.template$/, "");}),
    transforms.writeAssetsToDisc({isInitial: true}),
    transforms.reportErrorAndTerminate()
);
